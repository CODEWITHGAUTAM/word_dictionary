{"version":3,"sources":["components/Navbar.js","components/Form.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","home","onClick","togglemode","role","htmlFor","Form","useState","text","setText","style","color","heading","rows","backgroundColor","value","onChange","event","target","newText","toUpperCase","newText2","toLowerCase","newText3","replace","trim","text5","document","getElementById","select","navigator","clipboard","writeText","showAlert","split","filter","element","length","element1","Alert","alert","msg","App","setalert","darkmode","message","setTimeout","about","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.889155a3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n//import {Link} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  \r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\" >\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\" \r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n               {props.home}\r\n              </a>\r\n            </li>\r\n            {/*<li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">\r\n                {props.about}\r\n              </a>\r\n  </li>*/}\r\n          </ul>\r\n          <form className=\"d-flex\">\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n         <input className=\"form-check-input \" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n         </div>\r\n           \r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes={\r\n  title:PropTypes.string,\r\n  home:PropTypes.string,\r\n  about:PropTypes.string\r\n\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Form(props) {\r\n  const [text, setText] = useState('');\r\n \r\n\r\n  const ToUppercase = () => {\r\n    //console.log(\"uppercase was clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n  const ToLowercase = () => {\r\n    //console.log(\"Lowercase was clicked\");\r\n    let newText2 = text.toLowerCase();\r\n    setText(newText2);\r\n  };\r\n  const RemoveSpace = () => {\r\n    //console.log(\"Extraspace was clicked\");\r\n    let newText3 = text.replace(/\\s+/g, \" \").trim();\r\n    setText(newText3);\r\n    \r\n  };\r\n  const ClearText = () => {\r\n    //console.log(\"cleartext button was clicked\");\r\n    let newText4 = \"\";\r\n    setText(newText4);\r\n  };\r\n  const CopyText = () => {\r\n    var text5 = document.getElementById(\"exampleFormControlTextarea1\");\r\n    text5.select();\r\n    navigator.clipboard.writeText(text5.value);\r\n    props.showAlert(\"Text Copied\");\r\n    \r\n    \r\n  };\r\n  const handleOnchange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    \r\n     \r\n      <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"mb-3\">\r\n          <label\r\n            htmlFor=\"exampleFormControlTextarea1\"\r\n            className=\"form-label \"\r\n          ></label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"8\"\r\n            style={{backgroundColor:props.mode==='dark'?'#020926':'white',color:props.mode==='dark'?'white':'black'}}\r\n            value={text}\r\n            onChange={handleOnchange}\r\n          ></textarea>\r\n          <button\r\n            type=\"button\"\r\n            onClick={ToUppercase}\r\n            className=\"btn btn-primary my-3 mx-2\"\r\n          >\r\n            Convert to UpperCase\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={ToLowercase}\r\n            className=\"btn btn-primary my-3 mx-2\"\r\n          >\r\n            Convert to LowerCase\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={RemoveSpace}\r\n            className=\"btn btn-primary my-3 mx-2\"\r\n          >\r\n            Remove Extra Space\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={ClearText}\r\n            className=\"btn btn-primary my-3 mx-2\"\r\n          >\r\n            Clear Text\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={CopyText}\r\n            className=\"btn btn-primary my-3 mx-2\"\r\n          >\r\n            CopyText\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-2\"style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          {\r\n            text.split(/\\s+/).filter((element) => {\r\n              return element.length !== 0;\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} characters\r\n        </p>\r\n        <p>\r\n          {0.08 *\r\n            text.split(/\\s+/).filter((element1) => {\r\n              return element1.length !== 0;\r\n            }).length}{\" \"}\r\n          Minutes Read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter Something in the textbox above to preview it here!\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\n function Alert(props) {\r\n    return (\r\n        \r\n            props.alert && <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n                <strong>{props.alert.msg}</strong>\r\n                \r\n            </div>\r\n        \r\n    )\r\n}\r\nexport default Alert\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Form from \"./components/Form\";\nimport Alert from \"./components/Alert\";\n\n//import About from \"./components/About\";\n\n\n{/*import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  \n} from \"react-router-dom\";*/}\n\n\nfunction App() {\n  const [alert,setalert]=useState(null);\n  const [mode,darkmode]=useState('light');\n\n  const showAlert=(message)=>\n  {\n    setalert({\n      msg:message,\n     \n    })\n    setTimeout(() => {\n      setalert(null);\n      \n    }, 1500);\n\n  }\n  \n  const togglemode=()=>{\n    if(mode==='light')\n    {\n      darkmode('dark');\n      document.body.style.backgroundColor='#020926';\n      showAlert(\"Dark mode has been Enabled!!\");\n    }\n    else{\n      darkmode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"White mode has been Enabled!!\");\n    }\n  }\n  return (\n   \n  \n    <>\n    {/*<>*/}\n    <Navbar title=\"Word Counter\" home=\"Home\" about=\"About Us\" mode={mode} togglemode={togglemode} />\n    <Alert alert={alert}/>\n    <Form showAlert={showAlert} heading=\"Enter Text to Analyze!!\" mode={mode}/>\n\n    \n    {/*<Switch>\n          <Route exact path=\"/about\">\n          <About aboutauthor=\"About Developer\" contactauthor=\"Developer Achievements\" links=\"Contact Developer\"/>\n          </Route>\n         <Route exact  path=\"/\">\n         <Form showAlert={showAlert} heading=\"Enter Text to Analyze!!\" mode={mode}/>\n\n\n         </Route>\n        </Switch>\n     \n    </Router>*/}\n    \n   \n    \n    \n    \n    </>\n    \n   \n    \n      \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}